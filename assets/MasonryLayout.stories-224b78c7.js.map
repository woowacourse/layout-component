{"version":3,"file":"MasonryLayout.stories-224b78c7.js","sources":["../../src/lib/MasonryLayout/style.ts","../../src/lib/MasonryLayout/MasonryLayoutItem/style.ts","../../src/lib/MasonryLayout/MasonryLayoutItem/index.tsx","../../src/lib/MasonryLayout/index.tsx"],"sourcesContent":["import { styled } from 'styled-components';\nimport { CommonStyleProps, CommonTag } from '../style/common';\nimport { _MasonryLayoutProps } from '.';\n\ntype ComponentProps = _MasonryLayoutProps & CommonStyleProps;\n\nconst getGridTemplate = (responsiveSize?: number) => {\n  if (!responsiveSize) {\n    return;\n  }\n\n  return `repeat(auto-fill, minmax(${responsiveSize}px, 1fr))`;\n};\n\nconst getGridColumGap = ({\n  responsiveGap,\n  responsiveColumnGap,\n}: {\n  gap?: string;\n  columnGap?: string;\n  responsiveGap?: string;\n  responsiveColumnGap?: string;\n}) => {\n  const responseColumnGap = responsiveGap ? responsiveGap : responsiveColumnGap;\n\n  if (!responseColumnGap) {\n    return;\n  }\n\n  return responseColumnGap;\n};\n\nexport const Component = styled(CommonTag)<ComponentProps>`\n  display: grid;\n  box-sizing: border-box;\n  grid-template-columns: ${({ itemSize }) =>\n    `repeat(auto-fill, minmax(${itemSize}px, 1fr))`};\n\n  grid-auto-rows: 1px;\n  grid-column-gap: ${({ gap, columnGap = '0' }) => (gap ? gap : columnGap)};\n\n  @media (min-width: 640px) {\n    grid-template-columns: ${({ smallItemSize }) =>\n      getGridTemplate(smallItemSize)};\n    grid-column-gap: ${({ smallGap, smallColumnGap }) =>\n      getGridColumGap({\n        responsiveGap: smallGap,\n        responsiveColumnGap: smallColumnGap,\n      })};\n  }\n\n  @media (min-width: 768px) {\n    grid-template-columns: ${({ mediumItemSize }) =>\n      getGridTemplate(mediumItemSize)};\n    grid-column-gap: ${({ mediumGap, mediumColumnGap }) =>\n      getGridColumGap({\n        responsiveGap: mediumGap,\n        responsiveColumnGap: mediumColumnGap,\n      })};\n  }\n\n  @media (min-width: 1024px) {\n    grid-template-columns: ${({ largeItemSize }) =>\n      getGridTemplate(largeItemSize)};\n    grid-column-gap: ${({ largeGap, largeColumnGap }) =>\n      getGridColumGap({\n        responsiveGap: largeGap,\n        responsiveColumnGap: largeColumnGap,\n      })};\n  }\n\n  @media (min-width: 1280px) {\n    grid-template-columns: ${({ xLargeItemSize }) =>\n      getGridTemplate(xLargeItemSize)};\n    grid-column-gap: ${({ xLargeGap, xLargeColumnGap }) =>\n      getGridColumGap({\n        responsiveGap: xLargeGap,\n        responsiveColumnGap: xLargeColumnGap,\n      })};\n  }\n\n  @media (min-width: 1536px) {\n    grid-template-columns: ${({ doubleXLargeItemSize }) =>\n      getGridTemplate(doubleXLargeItemSize)};\n    grid-column-gap: ${({ doubleXLargeGap, doubleXLargeColumnGap }) =>\n      getGridColumGap({\n        responsiveGap: doubleXLargeGap,\n        responsiveColumnGap: doubleXLargeColumnGap,\n      })};\n  }\n`;\n","import styled from 'styled-components';\n\ninterface ComponentProps {\n  rowGap?: string;\n  smallRowGap?: string;\n  mediumRowGap?: string;\n  largeRowGap?: string;\n  xLargeRowGap?: string;\n  doubleXLargeRowGap?: string;\n  gap?: string;\n  smallGap?: string;\n  mediumGap?: string;\n  largeGap?: string;\n  xLargeGap?: string;\n  doubleXLargeGap?: string;\n  height: number;\n}\n\nconst getPaddingBottom = ({\n  responsiveGap,\n  responsiveRowGap,\n}: {\n  responsiveGap?: string;\n  responsiveRowGap?: string;\n}) => {\n  const responseColumnGap = responsiveGap ? responsiveGap : responsiveRowGap;\n\n  if (!responseColumnGap) {\n    return;\n  }\n\n  return responseColumnGap;\n};\n\nexport const Component = styled.div<ComponentProps>`\n  width: 100%;\n  height: max-content;\n  padding-bottom: ${({ gap, rowGap = '0' }) => (gap ? gap : rowGap)};\n  grid-row-end: ${({ height }) => `span ${height}`};\n\n  @media (min-width: 640px) {\n    padding-bottom: ${({ smallGap, smallRowGap }) =>\n      getPaddingBottom({\n        responsiveGap: smallGap,\n        responsiveRowGap: smallRowGap,\n      })};\n  }\n\n  @media (min-width: 768px) {\n    padding-bottom: ${({ mediumGap, mediumRowGap }) =>\n      getPaddingBottom({\n        responsiveGap: mediumGap,\n        responsiveRowGap: mediumRowGap,\n      })};\n  }\n\n  @media (min-width: 1024px) {\n    padding-bottom: ${({ largeGap, largeRowGap }) =>\n      getPaddingBottom({\n        responsiveGap: largeGap,\n        responsiveRowGap: largeRowGap,\n      })};\n  }\n\n  @media (min-width: 1280px) {\n    padding-bottom: ${({ xLargeGap, xLargeRowGap }) =>\n      getPaddingBottom({\n        responsiveGap: xLargeGap,\n        responsiveRowGap: xLargeRowGap,\n      })};\n  }\n\n  @media (min-width: 1536px) {\n    padding-bottom: ${({ doubleXLargeGap, doubleXLargeRowGap }) =>\n      getPaddingBottom({\n        responsiveGap: doubleXLargeGap,\n        responsiveRowGap: doubleXLargeRowGap,\n      })};\n  }\n`;\n","import { PropsWithChildren, useEffect, useRef, useState } from 'react';\nimport * as S from './style';\n\ninterface MasonryLayoutItemProps extends PropsWithChildren {\n  rowGap?: string;\n  smallRowGap?: string;\n  mediumRowGap?: string;\n  largeRowGap?: string;\n  xLargeRowGap?: string;\n  doubleXLargeRowGap?: string;\n  gap?: string;\n  smallGap?: string;\n  mediumGap?: string;\n  largeGap?: string;\n  xLargeGap?: string;\n  doubleXLargeGap?: string;\n}\n\nconst debounce = (func: any, timeout = 300) => {\n  let timer: NodeJS.Timeout;\n\n  return (...args: any[]) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n};\n\nexport default function MasonryLayoutItem({\n  children,\n  ...rest\n}: MasonryLayoutItemProps) {\n  const itemRef = useRef<HTMLDivElement>(null);\n  const [height, setHeight] = useState(1);\n\n  useEffect(() => {\n    if (!itemRef.current) return;\n\n    const callback = debounce((entries: ResizeObserverEntry[]) => {\n      const [entry] = entries;\n      const { height } = entry.target.getBoundingClientRect();\n\n      setHeight(Math.round(height));\n    }, 100);\n\n    const resizeObserver = new ResizeObserver(callback);\n\n    resizeObserver.observe(itemRef.current);\n\n    return () => resizeObserver.disconnect();\n  }, []);\n\n  return (\n    <S.Component height={height} {...rest} ref={itemRef}>\n      {children}\n    </S.Component>\n  );\n}\n","import { ElementType, ReactElement, createElement, forwardRef } from 'react';\nimport { PolymorphicComponentProps, PolymorphicRef } from '../types/common';\nimport * as S from './style';\nimport MasonryLayoutItem from './MasonryLayoutItem';\n\nexport interface _MasonryLayoutProps {\n  /**\n   * 아이템의 최소 너비를 숫자로 입력할 수 있습니다. 단위는 px입니다.\n   */\n  itemSize: number;\n  /**\n   * @media (min-width: 640px) 아이템의 최소 너비를 숫자로 입력할 수 있습니다. 단위는 px입니다.\n   */\n  smallItemSize?: number;\n  /**\n   * @media (min-width: 768px) 아이템의 최소 너비를 숫자로 입력할 수 있습니다. 단위는 px입니다.\n   */\n  mediumItemSize?: number;\n  /**\n   * @media (min-width: 1024px) 아이템의 최소 너비를 숫자로 입력할 수 있습니다. 단위는 px입니다.\n   */\n  largeItemSize?: number;\n  /**\n   * @media (min-width: 1280px) 아이템의 최소 너비를 숫자로 입력할 수 있습니다. 단위는 px입니다.\n   */\n  xLargeItemSize?: number;\n  /**\n   * @media (min-width: 1536px) 아이템의 최소 너비를 숫자로 입력할 수 있습니다. 단위는 px입니다.\n   */\n  doubleXLargeItemSize?: number;\n  /**\n   * 아이템들의 row, column의 간격을 문자열로 조정할 수 있습니다. EX) 10px, 10%\n   */\n  gap?: string;\n  /**\n   * @media (min-width: 640px) 아이템들의 row, column의 간격을 문자열로 조정할 수 있습니다. EX) 10px, 10%\n   */\n  smallGap?: string;\n  /**\n   * @media (min-width: 768px) 아이템들의 row, column의 간격을 문자열로 조정할 수 있습니다. EX) 10px, 10%\n   */\n  mediumGap?: string;\n  /**\n   * @media (min-width: 1024px) 아이템들의 row, column의 간격을 문자열로 조정할 수 있습니다. EX) 10px, 10%\n   */\n  largeGap?: string;\n  /**\n   * @media (min-width: 1280px) 아이템들의 row, column의 간격을 문자열로 조정할 수 있습니다. EX) 10px, 10%\n   */\n  xLargeGap?: string;\n  /**\n   * @media (min-width: 1536px) 아이템들의 row, column의 간격을 문자열로 조정할 수 있습니다. EX) 10px, 10%\n   */\n  doubleXLargeGap?: string;\n  /**\n   * row 방향의 간격을 문자열로 조정할 수 있습니다. EX) 10px, 10%\n   */\n  rowGap?: string;\n  /**\n   * @media (min-width: 640px) row 방향의 간격을 문자열로 조정할 수 있습니다. EX) 10px, 10%\n   */\n  smallRowGap?: string;\n  /**\n   * @media (min-width: 768px) row 방향의 간격을 문자열로 조정할 수 있습니다. EX) 10px, 10%\n   */\n  mediumRowGap?: string;\n  /**\n   * @media (min-width: 1024px) row 방향의 간격을 문자열로 조정할 수 있습니다. EX) 10px, 10%\n   */\n  largeRowGap?: string;\n  /**\n   * @media (min-width: 1280px) row 방향의 간격을 문자열로 조정할 수 있습니다. EX) 10px, 10%\n   */\n  xLargeRowGap?: string;\n  /**\n   * @media (min-width: 1536px) row 방향의 간격을 문자열로 조정할 수 있습니다. EX) 10px, 10%\n   */\n  doubleXLargeRowGap?: string;\n  /**\n   * column 방향의 간격을 문자열로 조정할 수 있습니다. EX) 10px, 10%\n   */\n  columnGap?: string;\n  /**\n   * @media (min-width: 640px) column 방향의 간격을 문자열로 조정할 수 있습니다. EX) 10px, 10%\n   */\n  smallColumnGap?: string;\n  /**\n   * @media (min-width: 768px) column 방향의 간격을 문자열로 조정할 수 있습니다. EX) 10px, 10%\n   */\n  mediumColumnGap?: string;\n  /**\n   * @media (min-width: 1024px) column 방향의 간격을 문자열로 조정할 수 있습니다. EX) 10px, 10%\n   */\n  largeColumnGap?: string;\n  /**\n   * @media (min-width: 1280px) column 방향의 간격을 문자열로 조정할 수 있습니다. EX) 10px, 10%\n   */\n  xLargeColumnGap?: string;\n  /**\n   * @media (min-width: 1536px) column 방향의 간격을 문자열로 조정할 수 있습니다. EX) 10px, 10%\n   */\n  doubleXLargeColumnGap?: string;\n}\n\nexport type MasonryLayoutProps<T extends ElementType> =\n  PolymorphicComponentProps<T, _MasonryLayoutProps>;\n\ntype MasonryLayoutComponent = <T extends ElementType>(\n  props: MasonryLayoutProps<T>\n) => ReactElement | null;\n\nconst MasonryLayout: MasonryLayoutComponent = forwardRef(function MasonryLayout<\n  T extends ElementType = 'div'\n>(\n  { css, as, children, ...rest }: MasonryLayoutProps<T>,\n  ref: PolymorphicRef<T>\n) {\n  const isChildrenArray = Array.isArray(children);\n\n  const childArray: ReactElement[] = isChildrenArray ? children : [children];\n\n  if (!isChildrenArray) {\n    return (\n      <S.Component as={as} ref={ref} style={css} {...rest}>\n        {children}\n      </S.Component>\n    );\n  }\n\n  return (\n    <S.Component as={as} ref={ref} style={css} {...rest}>\n      {childArray.map(child => (\n        <MasonryLayoutItem {...rest}>\n          {createElement(child.type, child.props)}\n        </MasonryLayoutItem>\n      ))}\n    </S.Component>\n  );\n});\n\nexport default MasonryLayout;\n"],"names":["getGridTemplate","responsiveSize","getGridColumGap","responsiveGap","responsiveColumnGap","responseColumnGap","Component","styled","CommonTag","itemSize","gap","columnGap","smallItemSize","smallGap","smallColumnGap","mediumItemSize","mediumGap","mediumColumnGap","largeItemSize","largeGap","largeColumnGap","xLargeItemSize","xLargeGap","xLargeColumnGap","doubleXLargeItemSize","doubleXLargeGap","doubleXLargeColumnGap","getPaddingBottom","responsiveRowGap","rowGap","height","smallRowGap","mediumRowGap","largeRowGap","xLargeRowGap","doubleXLargeRowGap","debounce","func","timeout","timer","args","MasonryLayoutItem","children","rest","itemRef","useRef","setHeight","useState","useEffect","callback","entries","entry","height2","resizeObserver","jsx","S.Component","MasonryLayout","forwardRef","css","as","ref","isChildrenArray","childArray","createElement","child"],"mappings":"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"}